{
  "build": {
    "dockerfile": "Dockerfile"
  },
  "features": {
    "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    "ghcr.io/jsburckhardt/devcontainer-features/gitleaks:1": {}
  },
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      "settings": {
        "workbench.colorTheme": "Default Dark Modern",
        "git.autofetch": true,
        "git.autofetchPeriod": 60,
        "editor.formatOnSave": true,
        "typescript.suggest.paths": false,
        "javascript.suggest.paths": false
      },
      "extensions": [
        "MS-CEINTL.vscode-language-pack-pl",
        "aaron-bond.better-comments",
        "GitHub.copilot-chat",
        "github.vscode-github-actions",
        "usernamehw.errorlens",
        "oven.bun-vscode",
        "yzhang.markdown-all-in-one",
        "mhutchie.git-graph",
        "christian-kohler.path-intellisense",
        "dbaeumer.vscode-eslint",
        "mikestead.dotenv",
        "steoates.autoimport",
        "esbenp.prettier-vscode"
      ]
    }
  },
  "containerEnv": {
    "WORKSPACE_PATH": "/workspaces/${localWorkspaceFolderBasename}",
    "SHELL": "/bin/bash",
    "DATABASE_URL": "postgresql://postgres:secret@FirstStep:5432/postgres?schema=public",
    "PATH": "/usr/local/bun/bin:${PATH}"
  },
  "postCreateCommand": {
    "gitleaksHook": "echo '#!/bin/sh\n# Pre-commit hook to run Gitleaks\n\necho \"Running Gitleaks scan...\"\n\n# Run Gitleaks and capture output\ngitleaks git --staged --verbose --exit-code 1 $WORKSPACE_PATH\n\n# Capture the exit code\nEXIT_CODE=$?\n\n# Check if Gitleaks detected secrets\nif [ $EXIT_CODE -ne 0 ]; then\n    echo \"Gitleaks detected potential secrets! Aborting commit.\"\n    exit 1\nfi\n\necho \"No secrets detected. Proceeding with commit.\"\nexit 0\n' > .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit",
    "prisma": "/usr/local/bin/prisma.sh",
    "buildStepusImage": "if [ -d AI ] && [ -f AI/Dockerfile ]; then cd AI && docker build -t stepus . || echo \"Błąd podczas budowania obrazu stepus\"; fi",
    "runStepusContainer": "docker ps -a | grep -q stepus && (docker ps | grep -q stepus || docker start stepus) || (docker run -d -p 8080:11434 --name stepus stepus || echo \"Nie można uruchomić kontenera stepus - najpierw należy zbudować obraz\")"
  },
  "remoteUser": "node"
}
